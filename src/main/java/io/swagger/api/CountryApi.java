/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Countries;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-01T04:50:02.206Z[GMT]")
@Validated
public interface CountryApi {

    @Operation(summary = "Unsubscribe from a server in a specified country", description = "", tags={ "Country" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "server Successfully deleted", content = @Content(mediaType = "application/json;charset&#x3D;UTF-8", schema = @Schema(implementation = Countries.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad syntactic"),
        
        @ApiResponse(responseCode = "404", description = "No such processor found"),
        
        @ApiResponse(responseCode = "500", description = "Internal server error"),
        
        @ApiResponse(responseCode = "504", description = "Gateway timeout") })
    @RequestMapping(value = "/country/{id}",
        produces = { "application/json;charset=UTF-8" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Countries> deleteCountryByID(@Parameter(in = ParameterIn.PATH, description = "Country name to delete", required=true, schema=@Schema()) @PathVariable("id") Long id);


    @Operation(summary = "Get country by id", description = "", tags={ "Country" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully", content = @Content(mediaType = "application/json;charset&#x3D;UTF-8", schema = @Schema(implementation = Countries.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad syntactic"),
        
        @ApiResponse(responseCode = "404", description = "Our server does Not exist in this country, or such country does Not exist"),
        
        @ApiResponse(responseCode = "500", description = "Internal server error"),
        
        @ApiResponse(responseCode = "504", description = "Gateway timeout") })
    @RequestMapping(value = "/country/{id}",
        produces = { "application/json;charset=UTF-8" }, 
        method = RequestMethod.GET)
    ResponseEntity<Countries> getCountryByID(@Parameter(in = ParameterIn.PATH, description = "Gave server virtual hardware", required=true, schema=@Schema()) @PathVariable("id") Long id);


    @Operation(summary = "Change server", description = "", tags={ "Country" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Country server changed Successfully wait for data transfer", content = @Content(mediaType = "application/json;charset&#x3D;UTF-8", schema = @Schema(implementation = Countries.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad syntactic"),
        
        @ApiResponse(responseCode = "402", description = "Payment error maybe Not eNough funds to pay"),
        
        @ApiResponse(responseCode = "404", description = "Our server does Not exist in this country, or such country does Not exist"),
        
        @ApiResponse(responseCode = "500", description = "Internal server error"),
        
        @ApiResponse(responseCode = "504", description = "Gateway timeout") })
    @RequestMapping(value = "/country/{id}",
        produces = { "application/json;charset=UTF-8" }, 
        method = RequestMethod.POST)
    ResponseEntity<Countries> postCountryByID(@Parameter(in = ParameterIn.PATH, description = "You can change the server if you need but it will take some time", required=true, schema=@Schema()) @PathVariable("id") Long id);


    @Operation(summary = "Buy server", description = "", tags={ "Country" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Server in this country provided", content = @Content(mediaType = "application/json;charset&#x3D;UTF-8", schema = @Schema(implementation = Countries.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad syntactic"),
        
        @ApiResponse(responseCode = "402", description = "Payment error maybe Not eNough funds to pay"),
        
        @ApiResponse(responseCode = "404", description = "Our server does Not exist in this country, or such country does Not exist"),
        
        @ApiResponse(responseCode = "500", description = "Internal server error"),
        
        @ApiResponse(responseCode = "504", description = "Gateway timeout") })
    @RequestMapping(value = "/country/{id}",
        produces = { "application/json;charset=UTF-8" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Countries> putCountryByID(@Parameter(in = ParameterIn.PATH, description = "Need name country", required=true, schema=@Schema()) @PathVariable("id") Long id);

}

